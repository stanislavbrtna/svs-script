function main {
  sys print("AUTOTESTSTART-####:");
  cnt = 1;
  if (1 == 1){
    sys print(cnt + " - if:OK");
  } else {
    sys print(cnt + " - else:ERR");
  }
  cnt = cnt + 1;

  if (1 != 1) {
    sys print(cnt + " - if:ERR");
  }else{
    sys print(cnt + " - else:OK");
  }
  cnt = cnt + 1;

  FAIL = 0;


  if((0xff == 255) * (0xa == 10) * (0x11 == 17)) {
    sys print(cnt + " - hexparse:OK");
  }else{
    sys print(cnt + " - hexparse:FAIL");
    FAIL = 1;
  }
  cnt = cnt + 1;

  a = 5;
  b = 10;
  {
  	local a = 15;
    b = a;
  }

  if((a == 5) * (b == 15)) {
    sys print(cnt + " - local:OK");
  }else{
    sys print(cnt + " - local:FAIL");
    FAIL = 1;
  }
  cnt = cnt + 1;

  i_flt = 9.0;
  i2_flt = 2.0;
  n_flt = i_flt / i2_flt;

  opFAIL = 0;

  if(n_flt != 4.5) {
    opFAIL = 1;
  }

  if(((i_flt + i2_flt) != 11.0) + ((i_flt-i2_flt) != 7.0) + ((i_flt*i2_flt) != 18.0)) {
    opFAIL = 1;
  }

  if("alpha" + "beta" + 8 != "alphabeta8") {
    opFAIL = 1;
  }

  if(((6+5)!=11)+((8-1)!=7)+((9*2)!=18)+(9/2!=4)+(9%2!=1)){
    opFAIL = 1;
  }
   
  # testing the 0.x tokenzer path
  if( 0.5 + "" != "0.5" or 0.05 + "" != "0.05") {
    opFAIL = 1;
  }

  if(opFAIL == 1) {
    FAIL = 1;
    sys print(cnt + " - math op: FAIL");
  } else {
    sys print(cnt + " - math op: OK");
  }
  cnt = cnt + 1;

  if (("str" == ret_str()) * (5.5 == ret_flt()) * (8 == ret_val())) {
    sys print(cnt + " - call return:OK");
  } else {
    sys print(cnt + " - call return:FAIL");
    FAIL = 1;
  }
  cnt = cnt + 1;

  a = 0;
  while(a < 5) {
    a = a + 1;
  }

  if (a != 5) {
    sys print(cnt + " - while:FAIL");
    FAIL = 1;
  } else {
    sys print(cnt + " - while:OK");
  }
  cnt = cnt + 1;

  a = 0;
  b = 0;
  while(a < 50) {
    a = a + 1;
    if (a == 25) {
      break;
    }
  }

  if (a != 25) {
    sys print(cnt + " - while-break:FAIL");
    FAIL = 1;
  } else {
    sys print(cnt + " - while-break:OK");
  }
  cnt = cnt + 1;

  b = 0;
  for(a = 0; a < 5; a = a + 1;) {
    b = 5;
  }

  if ((a != 5) + (b != 5)) {
    sys print(cnt + " - for:FAIL");
    FAIL = 1;
  } else {
    sys print(cnt + " - for:OK");
  }
  cnt = cnt + 1;

  stnd = 0;
  standalone();
  if(stnd) {
    sys print(cnt + " - standalone call:OK");
  } else {
    sys print(cnt + " - standalone call:FAIL");
    FAIL = 1;
  }
  cnt = cnt + 1;

  a = 0;
  argsfunc(1, 2, 3, 4, 5, 6, "karel", 5.5, 6.1, 7.2);
  if (a == 55) {
    sys print(cnt + " - standalone argumented call:OK");
  } else {
    sys print(cnt + " - standalone argumented call:FAIL");
    FAIL=1;
  }
  cnt = cnt + 1;

  if ((99 == argsfunc(1, 2, 3, 4, 5, 6, "karel", 5.5, 6.1, 7.2)) * (1 != 6)) {
    sys print(cnt + " - argumented call:OK");
  } else {
    sys print(cnt + " - argumented call:FAIL");
    FAIL = 1;
  }
  cnt = cnt + 1;

  if ((TEST_VAL == 5) * (TEST_VAL2 == 8)) {
    sys print(cnt + " - Constants:OK");
  } else {
    sys print(cnt + " - Constants:FAIL");
    FAIL = 1;
  }
  cnt = cnt + 1;


  LogicFail = 0;
  if (not 1) {
  	LogicFail = 1;
  }

  if (((1 and 1) != 1)+((1 and 0)!=0)) {
  	LogicFail = 1;
  }

  if (((0 or 1) != 1)+((0 or 0)!=0)) {
  	LogicFail = 1;
  }
  if (LogicFail == 0){
  	sys print(cnt + " - Logic functions:OK");
  }else{
  	sys print(cnt + " - Logic functions:FAIL");
    FAIL = 1;
  }
  cnt = cnt + 1;

  if (typeof(1) == TYPE_NUM
  		and typeof("") == TYPE_STR
  		and typeof(3.3) == TYPE_FLOAT
  		and call(&testfunc, 1, 2, 3, 4, 5, 6, 7, 8, 9) == 45
  		and num("69") == 69
  		and num("0x50") == 80
  		and num("0xa") == 10
  		and num("0xFF") == 255
  		and num(55.96) == 55
  		and float("3.3") == 3.3
  		and float("123.456") == 123.456
  		and float("456.789") == 456.789
  		and float("420,69") == 420.69
  		and float("3.3") == 3.3
  		and float(99) == 99.0
  		and isnum("da5sd") == 0
  		and isnum("1") == 1
  		and isnum("1.1") == 2
  		and isnum(1) == 1
  		and isnum(1.1) == 2
  		and len("abcd") == 4
  		and rlen("aščf") == 6
  		and getcp("abcd", 2) == "b"
  		and getcp("žžgře", 4) == "ř"
  		and substr("ABCDEF", 2, 5) == "BCDE"
      and substr("abcšdefčghř123", 8, 12) == "čghř1"
  		and instr("abcdefghchijklmnopq", "chi") == 9
  		and instr("abcdefghchijklmnopq", "abc") == 1
  		and instr("abcdefghchijklmnopq", "opq") == 17
  		and instr("abcdefghchijklmnopq", "pqz") == 0
  		and instr("abcdefghchijklmnopq", "chui") == 0
  		and lower("aBcDeFgH") == "abcdefgh"
  		and upper("aBcDeFgH") == "ABCDEFGH"
  		and charval("A") == 65
  		and charval(300) == ""
  		and charval("x") == 120
  		) {

    sys print(cnt + " - Integrated functions:OK");
  }else{
    sys print(cnt + " - Integrated functions:FAIL");
    FAIL = 1;
  }
  cnt = cnt + 1;

  for(x = 0; x < 10; x++;) {
  	b = 1 + b;
  }
  for(y = 10; y > 0; y--;) {}

  if (x == 10 and y == 0){
    sys print(cnt + " - Increment and decrement:OK");
  }else{
    sys print(cnt + " - Increment and decrement:FAIL");
    FAIL = 1;
  }
  cnt = cnt + 1;

  if ("megabox123" == &megabox123) {
    sys print(cnt + " - identificator passing:OK");
  }else{
    sys print(cnt + " - identificator passing:FAIL");
    FAIL = 1;
  }
  cnt = cnt + 1;

  if (sin(0.5) + "" == "0.47943" and
      cos(0.5) + "" == "0.87758" and
      tan(0.5) + "" == "0.5463" and
      atan(0.8) + "" == "0.67474" and
      atan2(0.8, 0.4) + "" == "1.10715" and
      log(5.0) + "" == "1.60944" and
      exp(3.0) + "" == "20.08554" and
      pow(5.0, 1.0/2.0) + "" == "2.23607" and
      pi() + "" == "3.14159" and
      sqrt(55.0) + "" == "7.4162"
      ) {
    sys print(cnt + " - advanced math:OK");
  }else{
    sys print(cnt + " - advanced math:FAIL");
    FAIL = 1;
  }
  cnt = cnt + 1;

  arr_fail = 0;

  array A[100];
  array B[100];
  array C = [1,2,3,4,5];
  for(x = 0; x < 100; x++;) {
    A[x] = "a"+x;
  }

  if (1) {
    local array A[100];
    for(x = 0; x < 100; x++;) {
      A[x] = "l_a"+x;
    }

    for(x = 0; x < 100; x++;) {
      if (A[x] != "l_a"+x) {
        arr_fail = 1;
      }
    }
  }

  for(x = 0; x < 100; x++;) {
    B[x] = "b"+x;
  }

  for(x = 0; x < 100; x++;) {
    if(B[x] != "b"+x or A[x] != "a"+x){
      arr_fail = 1;
    }
  }
  
  if (C[0] != 1 or C[1]!=2 or C[2]!=3 or C[3]!=4 or C[4]!=5) {
    arr_fail = 1;
  }

  if (not arr_fail) {
    sys print(cnt + " - arrays:OK");
  }else{
    sys print(cnt + " - arrays:FAIL");
    FAIL = 1;
  }

  cnt = cnt + 1;

  testVar1 = 56;
  testVar2 = 56;
  testVarStr1 = "abcd";
  testVarStr2 = "abcd";
  testVarStr3 = "abcd";

  testVarFlt1 = 13.5;
  testVarFlt2 = 13.5;

  testVar1 += 4;
  testVar2 += "G";

  testVarStr1 += 1;
  testVarStr2 += "efg";
  testVarStr3 += 1.5;

  testVarFlt1 += 0.5;
  testVarFlt2 += "abcd";

  testVar3 = 70;
  testVar4 = 70.0;

  testVar3 -= 5;
  testVar4 -= 0.75;

  testVar5 = 15;
  testVar6 = 15.0;

  testVar5 /= 3;
  testVar6 /= 3.0;

  testVar7 = 17;
  testVar7 %= 3;

  if (testVar1 == 60
      and testVar2 == "56G"
      and testVarStr1 == "abcd1"
      and testVarStr2 == "abcdefg"
      and testVarStr3 == "abcd1.5"
      and testVarFlt1 == 14.0
      and testVarFlt2 == "13.5abcd"
      and testVar3 == 65
      and testVar4 == 69.25
      and testVar5 == 5
      and testVar6 == 5.0
      and testVar7 == 2
  ) {
    sys print(cnt + " - inline ops:OK");
  }else{
    sys print(cnt + " - inline ops:FAIL " + testVarStr1 +" "+ testVar2);
    FAIL = 1;
  }
  cnt = cnt + 1;

  #comments hopefully works
  if(FAIL) {
    sys print("Test FAILED");
  } else {
    sys print("Test PASSED");
  }

  return FAIL;
}

function ret_str{
  return "str";
}

function ret_flt{
  return 5.5;
}

function ret_val{
  return 8;
}

function standalone{
  stnd = 1;
}

function argsfunc {
  if((arg0 == 1)*(arg1 == 2)*(arg2 == 3)*(arg3 == 4)*(arg4 == 5)*(arg5 == 6)*(arg6 == "karel")*(arg7 == 5.5)*(arg8 == 6.1)*(arg9 == 7.2)) { #
    a = 55;
    #sys print ("ko: "+arg0+" "+arg1+" "+arg2+" "+arg3+" "+arg4+" "+arg5+" "+arg6+" "+arg7+" "+arg8+" "+arg9);
    return 99;
  } else {
    #sys print ("ko: "+arg0+" "+arg1+" "+arg2+" "+arg3+" "+arg4+" "+arg5+" "+arg6+" "+arg7+" "+arg8+" "+arg9);
    return 0;
  }
}

function testfunc {
  return arg0 + arg1 + arg2 + arg3 + arg4 + arg5 + arg6 + arg7 + arg8;
}

